// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PVZCity.
const (
	Казань         PVZCity = "Казань"
	Москва         PVZCity = "Москва"
	СанктПетербург PVZCity = "Санкт-Петербург"
)

// Defines values for ProductType.
const (
	ProductTypeОбувь       ProductType = "обувь"
	ProductTypeОдежда      ProductType = "одежда"
	ProductTypeЭлектроника ProductType = "электроника"
)

// Defines values for ReceptionStatus.
const (
	Close      ReceptionStatus = "close"
	InProgress ReceptionStatus = "in_progress"
)

// Defines values for UserRole.
const (
	UserRoleEmployee  UserRole = "employee"
	UserRoleModerator UserRole = "moderator"
)

// Defines values for PostDummyLoginJSONBodyRole.
const (
	PostDummyLoginJSONBodyRoleEmployee  PostDummyLoginJSONBodyRole = "employee"
	PostDummyLoginJSONBodyRoleModerator PostDummyLoginJSONBodyRole = "moderator"
)

// Defines values for PostProductsJSONBodyType.
const (
	PostProductsJSONBodyTypeОбувь       PostProductsJSONBodyType = "обувь"
	PostProductsJSONBodyTypeОдежда      PostProductsJSONBodyType = "одежда"
	PostProductsJSONBodyTypeЭлектроника PostProductsJSONBodyType = "электроника"
)

// Defines values for PostRegisterJSONBodyRole.
const (
	Employee  PostRegisterJSONBodyRole = "employee"
	Moderator PostRegisterJSONBodyRole = "moderator"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// PVZ defines model for PVZ.
type PVZ struct {
	City             PVZCity             `json:"city"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	RegistrationDate *time.Time          `json:"registrationDate,omitempty"`
}

// PVZCity defines model for PVZ.City.
type PVZCity string

// Product defines model for Product.
type Product struct {
	DateTime    *time.Time          `json:"dateTime,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	ReceptionId openapi_types.UUID  `json:"receptionId"`
	Type        ProductType         `json:"type"`
}

// ProductType defines model for Product.Type.
type ProductType string

// Reception defines model for Reception.
type Reception struct {
	DateTime time.Time           `json:"dateTime"`
	Id       *openapi_types.UUID `json:"id,omitempty"`
	PvzId    openapi_types.UUID  `json:"pvzId"`
	Status   ReceptionStatus     `json:"status"`
}

// ReceptionStatus defines model for Reception.Status.
type ReceptionStatus string

// Token defines model for Token.
type Token = string

// User defines model for User.
type User struct {
	Email openapi_types.Email `json:"email"`
	Id    *openapi_types.UUID `json:"id,omitempty"`
	Role  UserRole            `json:"role"`
}

// UserRole defines model for User.Role.
type UserRole string

// PostDummyLoginJSONBody defines parameters for PostDummyLogin.
type PostDummyLoginJSONBody struct {
	Role PostDummyLoginJSONBodyRole `json:"role"`
}

// PostDummyLoginJSONBodyRole defines parameters for PostDummyLogin.
type PostDummyLoginJSONBodyRole string

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// PostProductsJSONBody defines parameters for PostProducts.
type PostProductsJSONBody struct {
	PvzId openapi_types.UUID       `json:"pvzId"`
	Type  PostProductsJSONBodyType `json:"type"`
}

// PostProductsJSONBodyType defines parameters for PostProducts.
type PostProductsJSONBodyType string

// GetPvzParams defines parameters for GetPvz.
type GetPvzParams struct {
	// StartDate Начальная дата диапазона
	StartDate *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Конечная дата диапазона
	EndDate *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`

	// Page Номер страницы
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Количество элементов на странице
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostReceptionsJSONBody defines parameters for PostReceptions.
type PostReceptionsJSONBody struct {
	PvzId openapi_types.UUID `json:"pvzId"`
}

// PostRegisterJSONBody defines parameters for PostRegister.
type PostRegisterJSONBody struct {
	Email openapi_types.Email `json:"email"`

	// Password Должен содержать минимум 8 символов.
	// Должен включать латинские строчные и заглавные буквы.
	// Должен содержать хотя бы один спецсимвол.
	Password string                   `json:"password"`
	Role     PostRegisterJSONBodyRole `json:"role"`
}

// PostRegisterJSONBodyRole defines parameters for PostRegister.
type PostRegisterJSONBodyRole string

// PostDummyLoginJSONRequestBody defines body for PostDummyLogin for application/json ContentType.
type PostDummyLoginJSONRequestBody PostDummyLoginJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody PostProductsJSONBody

// PostPvzJSONRequestBody defines body for PostPvz for application/json ContentType.
type PostPvzJSONRequestBody = PVZ

// PostReceptionsJSONRequestBody defines body for PostReceptions for application/json ContentType.
type PostReceptionsJSONRequestBody PostReceptionsJSONBody

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody PostRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение тестового токена
	// (POST /dummyLogin)
	PostDummyLogin(w http.ResponseWriter, r *http.Request)
	// Авторизация пользователя
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Добавление товара в текущую приемку (только для сотрудников ПВЗ)
	// (POST /products)
	PostProducts(w http.ResponseWriter, r *http.Request)
	// Получение списка ПВЗ с фильтрацией по дате приемки и пагинацией
	// (GET /pvz)
	GetPvz(w http.ResponseWriter, r *http.Request, params GetPvzParams)
	// Создание ПВЗ (только для модераторов)
	// (POST /pvz)
	PostPvz(w http.ResponseWriter, r *http.Request)
	// Закрытие последней открытой приемки товаров в рамках ПВЗ (только для сотрудников ПВЗ)
	// (POST /pvz/{pvzId}/close_last_reception)
	PostPvzPvzIdCloseLastReception(w http.ResponseWriter, r *http.Request, pvzId openapi_types.UUID)
	// Удаление последнего добавленного товара из текущей приемки (LIFO, только для сотрудников ПВЗ)
	// (POST /pvz/{pvzId}/delete_last_product)
	PostPvzPvzIdDeleteLastProduct(w http.ResponseWriter, r *http.Request, pvzId openapi_types.UUID)
	// Создание новой приемки товаров (только для сотрудников ПВЗ)
	// (POST /receptions)
	PostReceptions(w http.ResponseWriter, r *http.Request)
	// Регистрация пользователя
	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Получение тестового токена
// (POST /dummyLogin)
func (_ Unimplemented) PostDummyLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Авторизация пользователя
// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Добавление товара в текущую приемку (только для сотрудников ПВЗ)
// (POST /products)
func (_ Unimplemented) PostProducts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение списка ПВЗ с фильтрацией по дате приемки и пагинацией
// (GET /pvz)
func (_ Unimplemented) GetPvz(w http.ResponseWriter, r *http.Request, params GetPvzParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создание ПВЗ (только для модераторов)
// (POST /pvz)
func (_ Unimplemented) PostPvz(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Закрытие последней открытой приемки товаров в рамках ПВЗ (только для сотрудников ПВЗ)
// (POST /pvz/{pvzId}/close_last_reception)
func (_ Unimplemented) PostPvzPvzIdCloseLastReception(w http.ResponseWriter, r *http.Request, pvzId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удаление последнего добавленного товара из текущей приемки (LIFO, только для сотрудников ПВЗ)
// (POST /pvz/{pvzId}/delete_last_product)
func (_ Unimplemented) PostPvzPvzIdDeleteLastProduct(w http.ResponseWriter, r *http.Request, pvzId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создание новой приемки товаров (только для сотрудников ПВЗ)
// (POST /receptions)
func (_ Unimplemented) PostReceptions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Регистрация пользователя
// (POST /register)
func (_ Unimplemented) PostRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostDummyLogin operation middleware
func (siw *ServerInterfaceWrapper) PostDummyLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDummyLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostProducts operation middleware
func (siw *ServerInterfaceWrapper) PostProducts(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProducts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPvz operation middleware
func (siw *ServerInterfaceWrapper) GetPvz(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPvzParams

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPvz(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPvz operation middleware
func (siw *ServerInterfaceWrapper) PostPvz(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPvz(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPvzPvzIdCloseLastReception operation middleware
func (siw *ServerInterfaceWrapper) PostPvzPvzIdCloseLastReception(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pvzId" -------------
	var pvzId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "pvzId", chi.URLParam(r, "pvzId"), &pvzId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pvzId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPvzPvzIdCloseLastReception(w, r, pvzId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPvzPvzIdDeleteLastProduct operation middleware
func (siw *ServerInterfaceWrapper) PostPvzPvzIdDeleteLastProduct(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pvzId" -------------
	var pvzId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "pvzId", chi.URLParam(r, "pvzId"), &pvzId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pvzId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPvzPvzIdDeleteLastProduct(w, r, pvzId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostReceptions operation middleware
func (siw *ServerInterfaceWrapper) PostReceptions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostReceptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dummyLogin", wrapper.PostDummyLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/products", wrapper.PostProducts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pvz", wrapper.GetPvz)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pvz", wrapper.PostPvz)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pvz/{pvzId}/close_last_reception", wrapper.PostPvzPvzIdCloseLastReception)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pvz/{pvzId}/delete_last_product", wrapper.PostPvzPvzIdDeleteLastProduct)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/receptions", wrapper.PostReceptions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.PostRegister)
	})

	return r
}

type PostDummyLoginRequestObject struct {
	Body *PostDummyLoginJSONRequestBody
}

type PostDummyLoginResponseObject interface {
	VisitPostDummyLoginResponse(w http.ResponseWriter) error
}

type PostDummyLogin200JSONResponse Token

func (response PostDummyLogin200JSONResponse) VisitPostDummyLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDummyLogin400JSONResponse Error

func (response PostDummyLogin400JSONResponse) VisitPostDummyLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse Token

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin401JSONResponse Error

func (response PostLogin401JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin500JSONResponse Error

func (response PostLogin500JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostProductsRequestObject struct {
	Body *PostProductsJSONRequestBody
}

type PostProductsResponseObject interface {
	VisitPostProductsResponse(w http.ResponseWriter) error
}

type PostProducts201JSONResponse Product

func (response PostProducts201JSONResponse) VisitPostProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostProducts400JSONResponse Error

func (response PostProducts400JSONResponse) VisitPostProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProducts403JSONResponse Error

func (response PostProducts403JSONResponse) VisitPostProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostProducts500JSONResponse Error

func (response PostProducts500JSONResponse) VisitPostProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPvzRequestObject struct {
	Params GetPvzParams
}

type GetPvzResponseObject interface {
	VisitGetPvzResponse(w http.ResponseWriter) error
}

type GetPvz200JSONResponse []struct {
	Pvz        *PVZ `json:"pvz,omitempty"`
	Receptions *[]struct {
		Products  *[]Product `json:"products,omitempty"`
		Reception *Reception `json:"reception,omitempty"`
	} `json:"receptions,omitempty"`
}

func (response GetPvz200JSONResponse) VisitGetPvzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPvz500JSONResponse Error

func (response GetPvz500JSONResponse) VisitGetPvzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostPvzRequestObject struct {
	Body *PostPvzJSONRequestBody
}

type PostPvzResponseObject interface {
	VisitPostPvzResponse(w http.ResponseWriter) error
}

type PostPvz201JSONResponse PVZ

func (response PostPvz201JSONResponse) VisitPostPvzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPvz400JSONResponse Error

func (response PostPvz400JSONResponse) VisitPostPvzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPvz403JSONResponse Error

func (response PostPvz403JSONResponse) VisitPostPvzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostPvz500JSONResponse Error

func (response PostPvz500JSONResponse) VisitPostPvzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostPvzPvzIdCloseLastReceptionRequestObject struct {
	PvzId openapi_types.UUID `json:"pvzId"`
}

type PostPvzPvzIdCloseLastReceptionResponseObject interface {
	VisitPostPvzPvzIdCloseLastReceptionResponse(w http.ResponseWriter) error
}

type PostPvzPvzIdCloseLastReception200JSONResponse Reception

func (response PostPvzPvzIdCloseLastReception200JSONResponse) VisitPostPvzPvzIdCloseLastReceptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPvzPvzIdCloseLastReception400JSONResponse Error

func (response PostPvzPvzIdCloseLastReception400JSONResponse) VisitPostPvzPvzIdCloseLastReceptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPvzPvzIdCloseLastReception403JSONResponse Error

func (response PostPvzPvzIdCloseLastReception403JSONResponse) VisitPostPvzPvzIdCloseLastReceptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostPvzPvzIdCloseLastReception500JSONResponse Error

func (response PostPvzPvzIdCloseLastReception500JSONResponse) VisitPostPvzPvzIdCloseLastReceptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostPvzPvzIdDeleteLastProductRequestObject struct {
	PvzId openapi_types.UUID `json:"pvzId"`
}

type PostPvzPvzIdDeleteLastProductResponseObject interface {
	VisitPostPvzPvzIdDeleteLastProductResponse(w http.ResponseWriter) error
}

type PostPvzPvzIdDeleteLastProduct200Response struct {
}

func (response PostPvzPvzIdDeleteLastProduct200Response) VisitPostPvzPvzIdDeleteLastProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostPvzPvzIdDeleteLastProduct400JSONResponse Error

func (response PostPvzPvzIdDeleteLastProduct400JSONResponse) VisitPostPvzPvzIdDeleteLastProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPvzPvzIdDeleteLastProduct403JSONResponse Error

func (response PostPvzPvzIdDeleteLastProduct403JSONResponse) VisitPostPvzPvzIdDeleteLastProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostPvzPvzIdDeleteLastProduct500JSONResponse Error

func (response PostPvzPvzIdDeleteLastProduct500JSONResponse) VisitPostPvzPvzIdDeleteLastProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostReceptionsRequestObject struct {
	Body *PostReceptionsJSONRequestBody
}

type PostReceptionsResponseObject interface {
	VisitPostReceptionsResponse(w http.ResponseWriter) error
}

type PostReceptions201JSONResponse Reception

func (response PostReceptions201JSONResponse) VisitPostReceptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostReceptions400JSONResponse Error

func (response PostReceptions400JSONResponse) VisitPostReceptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostReceptions403JSONResponse Error

func (response PostReceptions403JSONResponse) VisitPostReceptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostReceptions500JSONResponse Error

func (response PostReceptions500JSONResponse) VisitPostReceptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(w http.ResponseWriter) error
}

type PostRegister201JSONResponse User

func (response PostRegister201JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister400JSONResponse Error

func (response PostRegister400JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister500JSONResponse Error

func (response PostRegister500JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Получение тестового токена
	// (POST /dummyLogin)
	PostDummyLogin(ctx context.Context, request PostDummyLoginRequestObject) (PostDummyLoginResponseObject, error)
	// Авторизация пользователя
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Добавление товара в текущую приемку (только для сотрудников ПВЗ)
	// (POST /products)
	PostProducts(ctx context.Context, request PostProductsRequestObject) (PostProductsResponseObject, error)
	// Получение списка ПВЗ с фильтрацией по дате приемки и пагинацией
	// (GET /pvz)
	GetPvz(ctx context.Context, request GetPvzRequestObject) (GetPvzResponseObject, error)
	// Создание ПВЗ (только для модераторов)
	// (POST /pvz)
	PostPvz(ctx context.Context, request PostPvzRequestObject) (PostPvzResponseObject, error)
	// Закрытие последней открытой приемки товаров в рамках ПВЗ (только для сотрудников ПВЗ)
	// (POST /pvz/{pvzId}/close_last_reception)
	PostPvzPvzIdCloseLastReception(ctx context.Context, request PostPvzPvzIdCloseLastReceptionRequestObject) (PostPvzPvzIdCloseLastReceptionResponseObject, error)
	// Удаление последнего добавленного товара из текущей приемки (LIFO, только для сотрудников ПВЗ)
	// (POST /pvz/{pvzId}/delete_last_product)
	PostPvzPvzIdDeleteLastProduct(ctx context.Context, request PostPvzPvzIdDeleteLastProductRequestObject) (PostPvzPvzIdDeleteLastProductResponseObject, error)
	// Создание новой приемки товаров (только для сотрудников ПВЗ)
	// (POST /receptions)
	PostReceptions(ctx context.Context, request PostReceptionsRequestObject) (PostReceptionsResponseObject, error)
	// Регистрация пользователя
	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostDummyLogin operation middleware
func (sh *strictHandler) PostDummyLogin(w http.ResponseWriter, r *http.Request) {
	var request PostDummyLoginRequestObject

	var body PostDummyLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDummyLogin(ctx, request.(PostDummyLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDummyLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDummyLoginResponseObject); ok {
		if err := validResponse.VisitPostDummyLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(w http.ResponseWriter, r *http.Request) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProducts operation middleware
func (sh *strictHandler) PostProducts(w http.ResponseWriter, r *http.Request) {
	var request PostProductsRequestObject

	var body PostProductsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProducts(ctx, request.(PostProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProducts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProductsResponseObject); ok {
		if err := validResponse.VisitPostProductsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPvz operation middleware
func (sh *strictHandler) GetPvz(w http.ResponseWriter, r *http.Request, params GetPvzParams) {
	var request GetPvzRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPvz(ctx, request.(GetPvzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPvz")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPvzResponseObject); ok {
		if err := validResponse.VisitGetPvzResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPvz operation middleware
func (sh *strictHandler) PostPvz(w http.ResponseWriter, r *http.Request) {
	var request PostPvzRequestObject

	var body PostPvzJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPvz(ctx, request.(PostPvzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPvz")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPvzResponseObject); ok {
		if err := validResponse.VisitPostPvzResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPvzPvzIdCloseLastReception operation middleware
func (sh *strictHandler) PostPvzPvzIdCloseLastReception(w http.ResponseWriter, r *http.Request, pvzId openapi_types.UUID) {
	var request PostPvzPvzIdCloseLastReceptionRequestObject

	request.PvzId = pvzId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPvzPvzIdCloseLastReception(ctx, request.(PostPvzPvzIdCloseLastReceptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPvzPvzIdCloseLastReception")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPvzPvzIdCloseLastReceptionResponseObject); ok {
		if err := validResponse.VisitPostPvzPvzIdCloseLastReceptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPvzPvzIdDeleteLastProduct operation middleware
func (sh *strictHandler) PostPvzPvzIdDeleteLastProduct(w http.ResponseWriter, r *http.Request, pvzId openapi_types.UUID) {
	var request PostPvzPvzIdDeleteLastProductRequestObject

	request.PvzId = pvzId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPvzPvzIdDeleteLastProduct(ctx, request.(PostPvzPvzIdDeleteLastProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPvzPvzIdDeleteLastProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPvzPvzIdDeleteLastProductResponseObject); ok {
		if err := validResponse.VisitPostPvzPvzIdDeleteLastProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostReceptions operation middleware
func (sh *strictHandler) PostReceptions(w http.ResponseWriter, r *http.Request) {
	var request PostReceptionsRequestObject

	var body PostReceptionsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostReceptions(ctx, request.(PostReceptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostReceptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostReceptionsResponseObject); ok {
		if err := validResponse.VisitPostReceptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(w http.ResponseWriter, r *http.Request) {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx, request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		if err := validResponse.VisitPostRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Y7fxnwAAAP//ZoAYeVInAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
